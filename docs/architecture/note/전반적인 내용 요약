
## 상태

적용 중 / 일부 대체됨 / [ 002. 다른 파일]()로 대체됨 / 보류 중
Accepted / Partly superseded / Superseded by DNS Infrastructure / Pending

01/17
- 서비스 개요 및 주요 특징 | 
쉽게 접근 가능 > 소셜 로그인 중 단 하나만, 
확실한 본인 인증 수단 속 익명의 게시판 > 사진 기능 도입 고려, 
무책임한 개인정보 관리 > 보안 부분을 구글과 유저에게 전가 ...

- 주요 기술 스택 | 주요 기술 스택과 사용 목적 기술 = 전체적인 시스템 구성도를 설명 (클라이언트, 백엔드, DB, API Gateway 등)

- 시스템 아키텍처 

- 도메인 모델 설계 | 예는 그냥 도메인 흐름만 정리하고, 일대 다 관계 매핑한 것만 보여주기

- 데이터 모델 및 ERD 설계 | ERD : 어떤 테이블이 어떤 역할을 하는지

- JPA 기반 엔티티 설계 및 연관관계 매핑 | JPA 연관관계를 고려한 매핑 설정

; - 백엔드 디렉터리 구조 및 설계 의도 | 초반 디렉터리 구조 => 백엔드 부분과 구성 이유 및 대안 

; - 게시판 기능 CRUD 흐름 처리 방식 | 소프트 삭제?

- OAuth2-JWT-기반-인증-및-인가-아키텍처 | OAuth 2.0 / JWT 기반 인증 방식 아키텍처 / URL 기반 액세스 토큰 제공의 위험 부담과 일단의 해결책 / 토큰 저장소 캐싱 가능하고 빠른 방식도 추후 고려 사항

- 비회원 접근 제어 | OAuth 2.0 / JWT 기반 인증 방식 아키텍처

- 토큰 탈취 위험 및 대책 | 

- API 응답 설계 | ResData, DTO 형식과 사용 이유, 그리고 HTTP의 헤더에 항상 인증정보를 표시하는 요청과 그렇지 않은 요청 분리

- API 명세 및 문서화 전략 | 뭔가 명세 프로그램 사용하거나 등

- 개발 환경 아키텍쳐 | 클라이언트와 백엔드 서버 모두 루프백으로 통신, 추후 url 부분을 모두 따로 수정해야하는 문제, CORS 에러 발생하고, 다만 개발 환경의 분리로 인해, 각 기능에만 집중할 수 있어서 테스트에 용이한 면도 있음, 하지만 API 응답 구조와 적절한 응답코드  반환 등 당연하지만 공부할 부분이 늘어나서 좋음 > 클라이언트, 백엔드, 프론트엔드의 분리에 대한 타당성만 기제, 테스트 환경과 배포환경 아키텍처는 링크로 표시
  = 요청 흐름 | 퀀스 다이어그램 유저가 프론트엔드에서 요청을 보냈을 때 백엔드, DB, 캐시 등에서 어떻게 처리되는지 시

- 테스트 환경 아키텍처 | 라즈베리파이, 방화벽, Nginx를 포함한 시스템 구성도와 한계 단점 등 왜 도커의 도입이 필요한지까지 

- Docker 기반 개발 및 배포 환경 아키텍처 | ... / Nginx까지 도커에 올려서 배포할까? ㄴㄴ 점원이 주방에 있는 거랑 똑같지 그럼

- CI/CD 파이프라인 및 배포 아키텍처 | 배포 플로우 차트 / 고정IP, DNS, SSH, CORS대응, 기존과 다른 내부 URL, OAuth2 리다이렉션 url, 기본 OAuth2 url 변경

- AWS 인프라 구성 및 운영 전략 | AWS 사용 리소스 (EC2, RDS, S3, ES 등), 라즈베리파이 운영 계획?

; - EC2 아키텍처 설계 및 운영 전략 | 여기서 Nginx에서 http를 도입 하기 전으로 구성 이후 https까지, 그리고 서버 장애 시 발생 문제 대응하도록, 따로 헤더 검사는 전혀 하지 않는 상태니까,

- EC2 HTTPS 도입 및 연결 아키텍처 | EC2의 Https 정책 도입, 연결 구조 등 ADRs 참조 ?

- EC2 보안 그룹 및 네트워크 정책 | 내부 포트 구성과 이유, 단점으로 RDS와 EBS(백업) 도입 시 추가 설정 필요

- 방화벽 설정 고려 사항 및 보안 전략 | 방화벽 설정하지 않은 이유 ? 추후 RDS등의 도입을 망설이며, 외부 통신과 설정 시 아직 바뀔 부분이 많아서,,

- 배포환경에서의 환경변수 관리 | 개발환경에서는 application-secret.yml, OS의 자체 환경변수 설정, .env파일, gitIgnore, dockerIgnore파일에 전달
배포 시 자동 주입 > gitSecret과, aws서비스 활용?  
아주 위험한 상태, 

- 배포 속도 최적화 (GitHub Actions 캐시 활용) | gitActions의 캐시 기능 활용

- EC2 및 ECR 메모리 관리 및 최적화 | 배포마다 주기적으로 EC2의 이미지 삭제, ECR에서 이미지 저장 상한 선 두기

- 서버 모니터링 및 장애 대응 전략 | 도메인으로 SSH 접속이 막힌다 > 고정 ip로 접속한다 > 이것도 문제가 생긴다 > 곤란
  aws의 뭔가 원격접속이나 자체 로그 관리 서비스 도입?

- 배치 스케줄링 및 데이터 관리 (닉네임 갱신 포함) | DB에 쌓인 데이터 삭제와, 매일 닉네임 갱신

- 무중단 배포 전략 및 Blue-Green / Rolling 배포 고려 | 

- 최적화, 동시성 제어 등

- 컴파일환경과 런타임 환경에서 바인딩되는 상황별 예시와 해결




...+ 
✔ 로그 관리 및 분석 (ELK Stack 고려?)

로그 수집, 분석, 저장 방식
운영 및 보안 모니터링
✔ 캐싱 전략 및 성능 최적화
Redis를 활용한 API 응답 속도 개선 (보류 중)
DB 부하 감소를 위한 캐싱 구조
✔ OAuth 2.0 관련 보안 이슈 및 대응 


; - DB 암호화? 잘 모르겠다.

; - 내부 서버 간 통신 ? message Queue

; - 로깅 및 모니터링 도구 (Prometheus, Grafana, ELK Stack)

; - 성능 최적화 전략 및 장애 대응 전략

; - CORS 보안 정책

; - CSRF 방어 정책

...
