name: Build and Push to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch: # 수동으로 액션 실행가능하도록 설정
    inputs:
      run_seed:
        description: "Run one-time seed job on EC2 after deploy?"
        required: false
        default: "false"

  # 아래 옵션 사용 시 빈 커밋 가능
  # git commit --allow-empty -m "trigger deploy [deploy]"

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 651706767183.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPO: dontgoback
  TAG: ${{ github.sha }}

jobs:
  build-push:
    # ex: git commit -m "fix: typo on login page [deploy]" 등 [deploy] 포함 시에만 자동 배포
    if: github.event_name != 'workflow_dispatch' && contains(github.event.head_commit.message, 'deploy') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Backend
        working-directory: ./dg-core-server
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO:backend-$TAG .
          docker push $ECR_REGISTRY/$ECR_REPO:backend-$TAG

      - name: Build and Push Frontend
        working-directory: ./frontend
        run: |
          echo "NEXT_PUBLIC_BACKEND_API_URL=https://dontgoback.kro.kr/api" >> .env.production
          echo "NEXT_PUBLIC_FRONTEND_URL=https://dontgoback.kro.kr" >> .env.production
          echo "NEXT_PUBLIC_JWT=${{ secrets.VISITOR_JWT }}" >> .env.production
          docker build -t $ECR_REGISTRY/$ECR_REPO:frontend-$TAG .
          docker push $ECR_REGISTRY/$ECR_REPO:frontend-$TAG

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i ~/.ssh/ec2_key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} \
            "if grep -q '^TAG=' /home/ubuntu/.env; then \
                sed -i 's/^TAG=.*/TAG=${TAG}/' /home/ubuntu/.env; \
              else \
                echo 'TAG=${TAG}' >> /home/ubuntu/.env; \
              fi && \
              docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) $ECR_REGISTRY && \
              docker-compose -f /home/ubuntu/docker-compose.yml down && \
              docker image prune -a -f && \
              docker pull $ECR_REGISTRY/$ECR_REPO:backend-$TAG && \
              docker pull $ECR_REGISTRY/$ECR_REPO:frontend-$TAG && \
              docker-compose -f /home/ubuntu/docker-compose.yml up -d"

      # run_seed=true로 수동 실행했을 때만 seeder가 돌고,
      # 락이 있으면 즉시 종료 → 재실행 안전.
      # 일반 자동 배포(push with [deploy])에선 seeder 스텝이 건너뜀.
      - name: Run one-time Seeder (optional)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_seed == 'true' }}
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i ~/.ssh/ec2_key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} \
            "
              set -e
              export AWS_REGION=${AWS_REGION}
              export ECR_REGISTRY=${ECR_REGISTRY}
              export ECR_REPO=${ECR_REPO}
              export TAG=${TAG}

              # 최신 이미지 로그인/풀
              docker login -u AWS -p \$(aws ecr get-login-password --region $AWS_REGION) $ECR_REGISTRY
              docker pull $ECR_REGISTRY/$ECR_REPO:backend-$TAG

              # ▶ seeder만 단발 실행
              docker compose -f /home/ubuntu/docker-compose.yml run --rm seeder

              # 로그 확인 (선택)
              # docker logs \$(docker ps -aq --filter 'name=seeder' --last 1)

              echo 'Seed job finished. (If lock existed, it should have exited quickly)'
            "

# docker image prune -a -f --filter 'until=24h'"

